// script.js

document.addEventListener('DOMContentLoaded', () => {

    // --- Selección de Elementos del DOM ---
    const menuToggle = document.getElementById('menu-toggle');
    const sidebar = document.getElementById('sidebar');
    const content = document.getElementById('content');
    const navLinks = document.querySelectorAll('nav ul li a');
    const views = document.querySelectorAll('.view');
    const body = document.body;
    const userEmailDisplay = document.getElementById('user-email');
    const scanButton = document.getElementById('scan-qr-button');
    const scannerContainer = document.getElementById('scanner-container');
    const scanResultDisplay = document.getElementById('scan-result');
    const checkinForm = document.getElementById('checkin-form');
    const qrSillaDisplay = document.getElementById('qr-silla-display');
    const clienteSillaDisplay = document.getElementById('cliente-silla-display');
    const usuarioDisplay = document.getElementById('usuario-display');
    const fechaHoraDisplay = document.getElementById('fecha-hora-display');
    const observacionesInput = document.getElementById('observaciones');
    const gpsStatusDisplay = document.getElementById('gps-status-display');
    const cancelButton = document.getElementById('cancel-button');
    const editModalOverlay = document.getElementById('edit-modal');
    const modalTitle = document.getElementById('modal-title');
    const editForm = document.getElementById('edit-form');
    const editFormFields = document.getElementById('edit-form-fields');
    const modalCloseBtn = editModalOverlay.querySelector('.modal-close-btn');
    const modalCancelBtn = editModalOverlay.querySelector('.modal-cancel-btn');
    const activeSessionCard = document.getElementById('active-session-card');
    const activeSessionClient = document.getElementById('active-session-client');
    const activeSessionTime = document.getElementById('active-session-time');
    const notificationContainer = document.getElementById('notification-container');
    // Elementos del Dashboard
    const dbMasajistasEnServicio = document.getElementById('db-masajistas-en-servicio');
    const dbClientesConServicio = document.getElementById('db-clientes-con-servicio');
    const dbListaSesionesActivas = document.getElementById('db-lista-sesiones-activas');
    const dbAlertasGpsHoy = document.getElementById('db-alertas-gps-hoy');
    const dbListaUltimasAlertasGps = document.getElementById('db-lista-ultimas-alertas-gps');
    const dbServiciosCompletadosHoy = document.getElementById('db-servicios-completados-hoy');
    const dbHorasServicioHoy = document.getElementById('db-horas-servicio-hoy');
    const dbTablaServiciosFinalizadosHoyBody = document.querySelector('#db-tabla-servicios-finalizados-hoy tbody');
    let serviciosPorClienteChartInstance = null; // Variable para la instancia del gráfico

    // --- Estado Inicial y Configuración ---
    const defaultViewId = 'marcar';
    let currentRole = 'Admin';
    let currentUserEmail = '';
    let html5QrCode = null;
    let currentCheckinData = null;
    let currentlyEditing = null;
    let isCreatingNew = false;

    // --- Simulación de Datos ---
    let configuracionDefault = [ { SettingID: 'Config1', ToleranciaGPSMetros: 150 } ];
    let masajistasDefault = [ { EmailMasajista: 'martinlimamersan@gmail.com', NombreMasajista: 'Martin L', Activo: true, Rol: 'Admin' },{ EmailMasajista: 'liz@gmail.com', NombreMasajista: 'Liz C', Activo: true, Rol: 'Masajista' },{ EmailMasajista: 'deborah@gmail.com', NombreMasajista: 'Debora F', Activo: true, Rol: 'Masajista' },{ EmailMasajista: 'nancy@gmail.com', NombreMasajista: 'Nancy K', Activo: false, Rol: 'Masajista' },{ EmailMasajista: 'ubipropiedades@gmail.com', NombreMasajista: 'Ubi Admin', Activo: true, Rol: 'Masajista' },];
    let clientesDefault = [ { ClienteID: 'Oficina Quick', NombreCliente: 'Oficina Quick', Direccion: 'Juan de Salazar 396', CoordenadasGPSCliente: '-25.284012, -57.618834', Activo: true },{ ClienteID: 'B&B SRL', NombreCliente: 'B & B SRL', Direccion: 'Edificio World Trade Center Torre 3 Piso 8', CoordenadasGPSCliente: '-25.292101, -57.576648', Activo: true },{ ClienteID: 'Syngenta SA', NombreCliente: 'Syngenta SA', Direccion: 'Av. Aviadores del Chaco c/ Av. Molas López', CoordenadasGPSCliente: '-25.285192, -57.580745', Activo: true },{ ClienteID: 'Casa Martin', NombreCliente: 'Casa Martin', Direccion: 'Hipólito Medina 7090', CoordenadasGPSCliente: '-25.310233, -57.561424', Activo: true },{ ClienteID: 'Pedidos Ya', NombreCliente: 'Pedidos Ya - Delivery Hero SA', Direccion: 'Nivel 3, Edificio Aymac I, Roque Centurion Miranda 1635', CoordenadasGPSCliente: '-25.289490, -57.579407', Activo: false },{ ClienteID: 'Ferrere', NombreCliente: 'Ferrere Abogados', Direccion: 'Av. Sta. Teresa 2106, Torres del Paseo', CoordenadasGPSCliente: '-25.297076, -57.569103', Activo: true },];
    let sillasDefault = [ { SillaID: 'silla001', QR_ID: 's001', Descripcion: 'Silla Oficina', ClienteAsociado: 'Oficina Quick', EsDeEvento: false, Activa: true },{ SillaID: 'silla002', QR_ID: 's002', Descripcion: 'Silla Planta Baja', ClienteAsociado: 'B&B SRL', EsDeEvento: false, Activa: true },{ SillaID: 'silla003', QR_ID: 's003', Descripcion: 'Silla Recepción', ClienteAsociado: 'Syngenta SA', EsDeEvento: false, Activa: true },{ SillaID: 'silla004', QR_ID: 's004', Descripcion: 'Silla Comedor', ClienteAsociado: 'Casa Martin', EsDeEvento: false, Activa: true },{ SillaID: 'silla015', QR_ID: 's015', Descripcion: 'Silla Evento X', ClienteAsociado: 'Ferrere', EsDeEvento: true, Activa: true },{ SillaID: 'silla016', QR_ID: 's016', Descripcion: 'Silla Sala Reunión', ClienteAsociado: 'Oficina Quick', EsDeEvento: false, Activa: true },{ SillaID: 'silla018', QR_ID: 's018', Descripcion: 'Silla Temporal', ClienteAsociado: 'Pedidos Ya', EsDeEvento: false, Activa: false }, ];
    let registrosDefault = [ { RegistroID: 'cd84bb6', MasajistaEmail: 'martinlimamersan@gmail.com', TimestampCheckIn: '2025-05-12T23:43:17', GPSCheckIn: '-25.3101, -57.5615', SillaQREscaneado: 's003', TimestampCheckOut: '2025-05-12T23:43:58', GPSCheckOut: '-25.3100, -57.5615', Duracion: '0:00:41', Notas: 'Llegada OK', EstadoValidacionGPS: 'Alerta', ClienteID_Historico: 'Syngenta SA', NombreCliente_Historico: 'Syngenta SA'},{ RegistroID: 'a651de7', MasajistaEmail: 'martinlimamersan@gmail.com', TimestampCheckIn: '2025-05-11T19:02:55', GPSCheckIn: '-25.3102, -57.5614', SillaQREscaneado: 's004', TimestampCheckOut: '2025-05-11T19:03:17', GPSCheckOut: '-25.3102, -57.5613', Duracion: '0:00:22', Notas: 'Todo normal', EstadoValidacionGPS: 'Ok', ClienteID_Historico: 'Casa Martin', NombreCliente_Historico: 'Casa Martin'},{ RegistroID: 'f4a3b21', MasajistaEmail: 'martinlimamersan@gmail.com', TimestampCheckIn: '2025-05-11T18:59:37', GPSCheckIn: '-25.2895, -57.5794', SillaQREscaneado: 's018', TimestampCheckOut: '2025-05-11T19:00:43', GPSCheckOut: '-25.2894, -57.5793', Duracion: '0:01:06', Notas: 'Cliente inactivo', EstadoValidacionGPS: 'Ok', ClienteID_Historico: 'Pedidos Ya', NombreCliente_Historico: 'Pedidos Ya - Delivery Hero SA'},{ RegistroID: 'b0991a5', MasajistaEmail: 'ubipropiedades@gmail.com', TimestampCheckIn: '2025-05-12T10:22:44', GPSCheckIn: '-25.2923, -57.5768', SillaQREscaneado: 's002', TimestampCheckOut: '2025-05-12T10:23:03', GPSCheckOut: '-25.2920, -57.5765', Duracion: '0:00:19', Notas: '', EstadoValidacionGPS: 'Ok', ClienteID_Historico: 'B&B SRL', NombreCliente_Historico: 'B & B SRL'},{ RegistroID: '2354cba', MasajistaEmail: 'ubipropiedades@gmail.com', TimestampCheckIn: '2025-05-12T10:42:50', GPSCheckIn: '-25.2860, -57.5810', SillaQREscaneado: 's003', TimestampCheckOut: '2025-05-12T10:43:10', GPSCheckOut: '-25.2855, -57.5805', Duracion: '0:00:20', Notas: 'Tráfico pesado', EstadoValidacionGPS: 'Alerta', ClienteID_Historico: 'Syngenta SA', NombreCliente_Historico: 'Syngenta SA'},{ RegistroID: '9d51cae', MasajistaEmail: 'ubipropiedades@gmail.com', TimestampCheckIn: '2025-05-12T10:58:31', GPSCheckIn: '-25.2971, -57.5690', SillaQREscaneado: 's015', TimestampCheckOut: '2025-05-12T10:58:58', GPSCheckOut: '-25.2970, -57.5691', Duracion: '0:00:27', Notas: 'Evento puntual', EstadoValidacionGPS: 'Ok', ClienteID_Historico: 'Ferrere', NombreCliente_Historico: 'Ferrere Abogados'},{ RegistroID: '8b47h12', MasajistaEmail: 'liz@gmail.com', TimestampCheckIn: '2025-05-12T09:52:14', GPSCheckIn: '-25.3103, -57.5613', SillaQREscaneado: 's004', TimestampCheckOut: '2025-05-12T09:52:35', GPSCheckOut: '-25.3102, -57.5614', Duracion: '0:00:21', Notas: '', EstadoValidacionGPS: 'Ok', ClienteID_Historico: 'Casa Martin', NombreCliente_Historico: 'Casa Martin'},{ RegistroID: 'a8c2f08', MasajistaEmail: 'liz@gmail.com', TimestampCheckIn: '2025-05-12T13:57:44', GPSCheckIn: '-25.2841, -57.6187', SillaQREscaneado: 's001', TimestampCheckOut: '2025-05-12T13:58:07', GPSCheckOut: '-25.2840, -57.6188', Duracion: '0:00:23', Notas: 'Visita rápida', EstadoValidacionGPS: 'Ok', ClienteID_Historico: 'Oficina Quick', NombreCliente_Historico: 'Oficina Quick'},{ RegistroID: 'xyz7890', MasajistaEmail: 'liz@gmail.com', TimestampCheckIn: '2025-05-13T08:30:00', GPSCheckIn: '-25.2920, -57.5765', SillaQREscaneado: 's002', TimestampCheckOut: null, GPSCheckOut: null, Duracion: null, Notas: 'Entrada del día', EstadoValidacionGPS: 'Ok', ClienteID_Historico: 'B&B SRL', NombreCliente_Historico: 'B & B SRL'}, ];
    let configuracion, masajistas, clientes, sillas, registros;

    // --- Funciones de LocalStorage ---
    function saveDataToLocalStorage() { console.log("Guardando datos en LocalStorage..."); try { localStorage.setItem('quickAppData_configuracion', JSON.stringify(configuracion)); localStorage.setItem('quickAppData_masajistas', JSON.stringify(masajistas)); localStorage.setItem('quickAppData_clientes', JSON.stringify(clientes)); localStorage.setItem('quickAppData_sillas', JSON.stringify(sillas)); localStorage.setItem('quickAppData_registros', JSON.stringify(registros)); console.log("Datos guardados."); } catch (e) { console.error("Error guardando en LocalStorage:", e); } }
    function loadDataFromLocalStorage() { console.log("Cargando datos desde LocalStorage..."); try { const confJSON = localStorage.getItem('quickAppData_configuracion'); const masajistasJSON = localStorage.getItem('quickAppData_masajistas'); const clientesJSON = localStorage.getItem('quickAppData_clientes'); const sillasJSON = localStorage.getItem('quickAppData_sillas'); const registrosJSON = localStorage.getItem('quickAppData_registros'); configuracion = confJSON ? JSON.parse(confJSON) : [...configuracionDefault]; masajistas = masajistasJSON ? JSON.parse(masajistasJSON) : [...masajistasDefault]; clientes = clientesJSON ? JSON.parse(clientesJSON) : [...clientesDefault]; sillas = sillasJSON ? JSON.parse(sillasJSON) : [...sillasDefault]; registros = registrosJSON ? JSON.parse(registrosJSON) : [...registrosDefault]; if (!Array.isArray(configuracion) || configuracion.length === 0) configuracion = [...configuracionDefault]; if (!Array.isArray(masajistas)) masajistas = [...masajistasDefault]; if (!Array.isArray(clientes)) clientes = [...clientesDefault]; if (!Array.isArray(sillas)) sillas = [...sillasDefault]; if (!Array.isArray(registros)) registros = [...registrosDefault]; } catch (e) { console.error("Error cargando de LocalStorage, usando defaults:", e); configuracion = [...configuracionDefault]; masajistas = [...masajistasDefault]; clientes = [...clientesDefault]; sillas = [...sillasDefault]; registros = [...registrosDefault]; } console.log("Datos cargados/inicializados."); }

    // --- Funciones Auxiliares y de UI (Notificaciones, etc.) ---
    function showNotification(message, type = 'info', duration = 3000) { if (!notificationContainer) return; const notification = document.createElement('div'); notification.className = `notification ${type}`; notification.textContent = message; notificationContainer.appendChild(notification); requestAnimationFrame(() => { notification.classList.add('show'); }); setTimeout(() => { notification.classList.remove('show'); notification.addEventListener('transitionend', () => { if (notification.parentNode) { notification.parentNode.removeChild(notification); } }, { once: true }); }, duration); }
    function formatLocalDateTime(dateInput, includeDate = true) { if (!dateInput) return 'Pendiente'; try { const date = new Date(dateInput); if (isNaN(date.getTime())) return 'Fecha inválida'; const optsDate = { year: 'numeric', month: '2-digit', day: '2-digit' }; const optsTime = { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true }; let formattedString = ''; if (includeDate) { formattedString += date.toLocaleDateString('es-ES', optsDate) + ", "; } formattedString += date.toLocaleTimeString('en-US', optsTime).toLowerCase(); return formattedString; } catch (e) { console.error("Fmt Err:", e); return 'Err'; } }
    function sortRecordsDescending(records, field = 'TimestampCheckIn') { records.sort((a, b) => { const timeA = new Date(a[field] || (field === 'TimestampCheckOut' ? a.TimestampCheckIn : 0)); const timeB = new Date(b[field] || (field === 'TimestampCheckOut' ? b.TimestampCheckIn : 0)); if (!timeA && !timeB) return 0; if (!timeA) return 1; if (!timeB) return -1; if (isNaN(timeA.getTime()) && isNaN(timeB.getTime())) return 0; if (isNaN(timeA.getTime())) return 1; if (isNaN(timeB.getTime())) return -1; return timeB - timeA; }); }
    function getDistanceFromLatLonInMeters(lat1, lon1, lat2, lon2) { const R = 6371000; const dLat = deg2rad(lat2 - lat1); const dLon = deg2rad(lon2 - lon1); const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2); const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); return R * c; }
    function deg2rad(deg) { return deg * (Math.PI / 180); }
    function parseCoordinates(coordString) { if (!coordString || typeof coordString !== 'string') return null; const parts = coordString.split(',').map(s => parseFloat(s.trim())); if (parts.length === 2 && !isNaN(parts[0]) && !isNaN(parts[1])) return { lat: parts[0], lon: parts[1] }; return null; }
    function getCurrentLocation() { return new Promise((resolve, reject) => { if (!navigator.geolocation) { reject(new Error('GPS no soportado.')); return; } navigator.geolocation.getCurrentPosition( pos => resolve({ lat: pos.coords.latitude, lon: pos.coords.longitude, accuracy: pos.coords.accuracy }), err => { let msg = 'Error GPS: '; switch (err.code) { case 1: msg += "Permiso denegado."; break; case 2: msg += "Ubicación no disponible."; break; case 3: msg += "Timeout."; break; default: msg += `Error ${err.code}.`; break; } reject(new Error(msg)); }, { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 } ); }); }
    function populateHistoryTable() { const v = document.getElementById('view-historial'); if (!v) return; const c = v.querySelector('.table-container'); if (!c) return; if (!currentUserEmail) return; let recs = registros.filter(r => r.MasajistaEmail === currentUserEmail); sortRecordsDescending(recs); let h = `<table><thead><tr><th>Usuario</th><th>Cliente</th><th>Fecha Ingreso</th><th>Fecha Salida</th><th>Duración</th><th>Estado GPS</th><th>Notas</th><th>QR Silla</th></tr></thead><tbody>`; if (recs.length === 0) h += `<tr><td colspan="8" style="text-align: center;">No hay registros.</td></tr>`; else recs.forEach(r => { const m = masajistas.find(u => u.EmailMasajista === r.MasajistaEmail); const n = m ? m.NombreMasajista : (r.MasajistaEmail || '?'); let sC = r.EstadoValidacionGPS === 'Ok' ? 'status-ok' : (r.EstadoValidacionGPS === 'Alerta' ? 'status-alerta' : ''); const nC = (r.Notas || '-').substring(0, 30) + (r.Notas && r.Notas.length > 30 ? '...' : ''); h += `<tr><td>${n}</td><td>${r.NombreCliente_Historico || 'N/A'}</td><td>${formatLocalDateTime(r.TimestampCheckIn)}</td><td>${formatLocalDateTime(r.TimestampCheckOut)}</td><td>${r.Duracion || '-'}</td><td>${sC ? `<span class="status-indicator ${sC}"></span>` : ''} ${r.EstadoValidacionGPS || 'N/A'}</td><td title="${r.Notas || ''}">${nC}</td><td>${r.SillaQREscaneado || 'N/A'}</td></tr>`; }); h += `</tbody></table>`; c.innerHTML = h; }
    function populateClientesTable() { const v = document.getElementById('view-clientes'); if (!v || currentRole !== 'Admin') return; const c = v.querySelector('.table-container'); if (!c) return; let h = `<table><thead><tr><th>Nombre Cliente</th><th>Dirección</th><th>GPS</th><th>Activo</th><th>Acciones</th></tr></thead><tbody>`; if (clientes.length === 0) h += `<tr><td colspan="5" style="text-align: center;">No hay clientes.</td></tr>`; else clientes.forEach(cli => h += `<tr><td>${cli.NombreCliente || 'N/A'}</td><td>${cli.Direccion || '-'}</td><td>${cli.CoordenadasGPSCliente || '-'}</td><td>${cli.Activo ? 'Sí' : 'No'}</td><td><button class="btn-edit" data-id="${cli.ClienteID}" title="Editar">✏️</button><button class="btn-delete" data-id="${cli.ClienteID}" title="Borrar">🗑️</button></td></tr>`); h += `</tbody></table>`; c.innerHTML = h; }
    function populateSillasTable() { const v = document.getElementById('view-sillas'); if (!v || currentRole !== 'Admin') return; const c = v.querySelector('.table-container'); if (!c) return; let h = `<table><thead><tr><th>QR ID</th><th>Descripción</th><th>Cliente Asociado</th><th>Es Evento</th><th>Activa</th><th>Acciones</th></tr></thead><tbody>`; if (sillas.length === 0) h += `<tr><td colspan="6" style="text-align: center;">No hay sillas.</td></tr>`; else sillas.forEach(s => { const cli = clientes.find(cl => cl.ClienteID === s.ClienteAsociado); const nCli = cli ? cli.NombreCliente : '?'; h += `<tr><td>${s.QR_ID || 'N/A'}</td><td>${s.Descripcion || '-'}</td><td>${nCli}</td><td>${s.EsDeEvento ? 'Sí' : 'No'}</td><td>${s.Activa ? 'Sí' : 'No'}</td><td><button class="btn-edit" data-id="${s.SillaID}" title="Editar">✏️</button><button class="btn-delete" data-id="${s.SillaID}" title="Borrar">🗑️</button></td></tr>`; }); h += `</tbody></table>`; c.innerHTML = h; }
    function populateMasajistasTable() { const v = document.getElementById('view-masajistas'); if (!v || currentRole !== 'Admin') return; const c = v.querySelector('.table-container'); if (!c) return; let h = `<table><thead><tr><th>Nombre</th><th>Email</th><th>Rol</th><th>Activo</th><th>Acciones</th></tr></thead><tbody>`; if (masajistas.length === 0) h += `<tr><td colspan="5" style="text-align: center;">No hay masajistas.</td></tr>`; else masajistas.forEach(mas => h += `<tr><td>${mas.NombreMasajista || 'N/A'}</td><td>${mas.EmailMasajista || 'N/A'}</td><td>${mas.Rol || 'N/A'}</td><td>${mas.Activo ? 'Sí' : 'No'}</td><td><button class="btn-edit" data-email="${mas.EmailMasajista}" title="Editar">✏️</button><button class="btn-delete" data-email="${mas.EmailMasajista}" title="Borrar">🗑️</button></td></tr>`); h += `</tbody></table>`; c.innerHTML = h; }
    function populateRegistrosTable() { const v = document.getElementById('view-registros'); if (!v || currentRole !== 'Admin') return; const c = v.querySelector('.table-container'); if (!c) return; const recs = [...registros]; sortRecordsDescending(recs); let h = `<table><thead><tr><th>Usuario</th><th>Cliente</th><th>Fecha Ingreso</th><th>Fecha Salida</th><th>Duración</th><th>Estado GPS</th><th>GPS CheckIn</th><th>Notas</th><th>QR Silla</th></tr></thead><tbody>`; if (recs.length === 0) h += `<tr><td colspan="9" style="text-align: center;">No hay registros.</td></tr>`; else recs.forEach(r => { const m = masajistas.find(u => u.EmailMasajista === r.MasajistaEmail); const n = m ? m.NombreMasajista : (r.MasajistaEmail || '?'); let sC = r.EstadoValidacionGPS === 'Ok' ? 'status-ok' : (r.EstadoValidacionGPS === 'Alerta' ? 'status-alerta' : ''); const nC = (r.Notas || '-').substring(0, 30) + (r.Notas && r.Notas.length > 30 ? '...' : ''); h += `<tr><td>${n}</td><td>${r.NombreCliente_Historico || 'N/A'}</td><td>${formatLocalDateTime(r.TimestampCheckIn)}</td><td>${formatLocalDateTime(r.TimestampCheckOut)}</td><td>${r.Duracion || '-'}</td><td>${sC ? `<span class="status-indicator ${sC}"></span>` : ''} ${r.EstadoValidacionGPS || 'N/A'}</td><td>${r.GPSCheckIn || '-'}</td><td title="${r.Notas || ''}">${nC}</td><td>${r.SillaQREscaneado || 'N/A'}</td></tr>`; }); h += `</tbody></table>`; c.innerHTML = h; }
    function loadConfigurationView() { if (currentRole === 'Admin') { const i = document.getElementById('tolerancia-gps'); const s = document.getElementById('config-save-status'); if (i) i.value = configuracion[0]?.ToleranciaGPSMetros || 100; if (s) s.textContent = ''; } }
    function saveConfiguration() { if (currentRole === 'Admin') { const i = document.getElementById('tolerancia-gps'); const s = document.getElementById('config-save-status'); if (!i || !s) return; const nV = parseInt(i.value, 10); if (!isNaN(nV) && nV >= 0) { configuracion[0].ToleranciaGPSMetros = nV; saveDataToLocalStorage(); console.log("Config guardada:", configuracion); showNotification('¡Configuración guardada!', 'success'); s.textContent = ''; setTimeout(() => { s.textContent = ''; }, 3000); } else { showNotification("Valor inválido para la tolerancia.", 'error'); s.textContent = 'Error.'; } } }
    function setActiveView(viewId) { const currentActiveView = document.querySelector('.view.active'); if (currentActiveView && currentActiveView.id === 'view-marcar') { if (html5QrCode && html5QrCode.isScanning) { console.log("setActiveView: Navegando fuera de 'marcar', deteniendo scanner..."); stopScanner().catch(err => console.warn("setActiveView: Error menor al detener scanner:", err)); if(scanButton) scanButton.style.display = 'block'; if(scannerContainer) scannerContainer.style.display = 'none'; if(scanResultDisplay) scanResultDisplay.style.display = 'none'; if(checkinForm) checkinForm.style.display = 'none'; } } views.forEach(v => v.classList.remove('active')); const tV = document.getElementById(`view-${viewId}`); if (tV) { if (tV.classList.contains('admin-only') && currentRole !== 'Admin') { console.warn(`Acceso denegado: ${viewId}`); setActiveView(defaultViewId); return; } tV.classList.add('active'); if (viewId === 'configuracion' && currentRole === 'Admin') loadConfigurationView(); if (viewId === 'marcar' && activeSessionCard) displayActiveSessionCard(); if (viewId === 'dashboard' && currentRole === 'Admin') populateDashboard(); } else { console.warn(`Vista ${viewId} no encontrada.`); const dV = document.getElementById(`view-${defaultViewId}`); if (dV) dV.classList.add('active'); } navLinks.forEach(l => { l.classList.remove('active-link'); const li = l.closest('li'); if (l.dataset.view === viewId && li && li.style.display !== 'none') l.classList.add('active-link'); }); }
    function setupRoleBasedUI(role) { const u = masajistas.find(m => m.Rol === role) || masajistas.find(m => m.EmailMasajista.includes(role.toLowerCase())); currentUserEmail = u ? u.EmailMasajista : `sim_${role.toLowerCase()}@q.com`; if (userEmailDisplay) userEmailDisplay.textContent = currentUserEmail; console.log(`UI: Rol=${role}, Email=${currentUserEmail}`); document.querySelectorAll('.admin-only').forEach(el => el.style.display = (role === 'Admin') ? '' : 'none'); let initId = defaultViewId; const dL = document.querySelector(`nav a[data-view="${initId}"]`); if (!dL || (dL.closest('li') && dL.closest('li').style.display === 'none')) { const fVL = document.querySelector('nav li:not([style*="display: none"]) a'); initId = fVL ? fVL.dataset.view : null; } if (initId) { setActiveView(initId); populateHistoryTable(); if (role === 'Admin') { populateClientesTable(); populateSillasTable(); populateMasajistasTable(); populateRegistrosTable(); if(initId === 'dashboard') populateDashboard(); } } else { console.error(`No vistas para ${role}.`); views.forEach(v => v.classList.remove('active')); if(content) content.innerHTML = '<p>Error: No vistas accesibles.</p>'; } }
    function startScanner() { console.log("Intentando iniciar scanner..."); if (typeof Html5Qrcode === "undefined") { showNotification("Error: Librería de escaneo no cargada.", "error"); console.error("Html5Qrcode no definido."); resetMarcarView(false); return; } scanButton.style.display = 'none'; scanResultDisplay.textContent = 'Apunte cámara...'; scanResultDisplay.style.display = 'block'; scannerContainer.style.display = 'block'; checkinForm.style.display = 'none'; if (!html5QrCode) { try { html5QrCode = new Html5Qrcode("scanner-container"); console.log("Instancia Html5Qrcode creada."); } catch (e) { console.error("Error creando instancia:", e); showNotification("Error al inicializar escáner.", "error"); resetMarcarView(false); return; } } const qrCodeSuccessCallback = async (decodedText, decodedResult) => { if (!html5QrCode || !html5QrCode.isScanning) { console.log("Scan detectado pero no activo."); return; } console.log(`QR Scanned: ${decodedText}`); try { await stopScanner(); console.log("Scanner detenido, procesando..."); await handleScanSuccess(decodedText); } catch (e) { console.error("Error post-escaneo:", e); showNotification(`Error procesando scan: ${e.message}`, 'error'); resetMarcarView(false); } }; const config = { fps: 10, qrbox: { width: 250, height: 250 } }; html5QrCode.start({ facingMode: "environment" }, config, qrCodeSuccessCallback).then(() => { console.log("Scanner iniciado."); }).catch((err) => { console.error("Error iniciando scanner:", err); let errMsg = `Error cámara: ${err.message || err.name}`; if (err.name === 'NotAllowedError') errMsg = "Error: Permiso de cámara denegado."; else if (err.name === 'NotFoundError') errMsg = "Error: No se encontró cámara."; showNotification(errMsg, "error"); resetMarcarView(false); }); }
    function stopScanner() { return new Promise((resolve, reject) => { if (html5QrCode && html5QrCode.isScanning) { console.log("Llamando a stop()..."); html5QrCode.stop().then(() => { console.log("Promesa stop() resuelta."); if(scannerContainer) scannerContainer.style.display = 'none'; resolve(); }).catch(err => { console.error("Error en stop():", err); if(scannerContainer) scannerContainer.style.display = 'none'; reject(err); }); } else { console.log("stopScanner: no activo o instancia null."); if(scannerContainer) scannerContainer.style.display = 'none'; resolve(); } }); }
    async function handleScanSuccess(qrCodeValue) { console.log("Inicio handleScanSuccess QR:", qrCodeValue); scanResultDisplay.textContent = `QR: ${qrCodeValue}. Procesando...`; scanResultDisplay.style.display = 'block'; checkinForm.style.display = 'none'; try { console.log("Buscando silla..."); const silla = sillas.find(s => s.QR_ID === qrCodeValue); if (!silla) { throw new Error(`QR "${qrCodeValue}" no encontrado.`); } console.log("Silla:", silla); if (!silla.Activa) { throw new Error(`Silla QR "${qrCodeValue}" inactiva.`); } console.log("Buscando cliente:", silla.ClienteAsociado); const cliente = clientes.find(c => c.ClienteID === silla.ClienteAsociado); if (!cliente) { throw new Error(`Cliente "${silla.ClienteAsociado}" no encontrado (QR: ${qrCodeValue}).`); } console.log("Cliente:", cliente); if (!cliente.Activo) console.warn(`Advertencia: Cliente "${cliente.NombreCliente}" inactivo.`); console.log("Obteniendo GPS..."); scanResultDisplay.textContent = `QR: ${qrCodeValue}. Obteniendo ubicación...`; let currentLocation, gpsErrorMessage = null; try { currentLocation = await getCurrentLocation(); console.log("Ubicación:", currentLocation); } catch (e) { console.error("Error GPS:", e); gpsErrorMessage = e.message; } console.log("Validando GPS..."); const now = new Date(); const timestamp = now.toISOString(); const clienteCoords = parseCoordinates(cliente.CoordenadasGPSCliente); let distancia = null; let estadoGPS = 'No Disponible'; let estadoGPSClass = 'pendiente'; if (currentLocation && clienteCoords) { distancia = getDistanceFromLatLonInMeters(currentLocation.lat, currentLocation.lon, clienteCoords.lat, clienteCoords.lon); const tolerancia = configuracion[0]?.ToleranciaGPSMetros || 100; if (distancia <= tolerancia) { estadoGPS = `Ok (${distancia.toFixed(0)}m)`; estadoGPSClass = 'ok'; } else { estadoGPS = `Alerta (${distancia.toFixed(0)}m)`; estadoGPSClass = 'alerta'; } console.log(`Dist: ${distancia.toFixed(1)}m. Tol: ${tolerancia}m. Estado: ${estadoGPS}`); } else if (gpsErrorMessage) { estadoGPS = `Error GPS: ${gpsErrorMessage}`; estadoGPSClass = 'alerta'; } else if (!clienteCoords) { estadoGPS = 'GPS Cliente N/A'; estadoGPSClass = 'pendiente'; } currentCheckinData = { qrCode: qrCodeValue, sillaId: silla.SillaID, clienteId: cliente.ClienteID, clienteNombre: cliente.NombreCliente, masajistaEmail: currentUserEmail, timestamp: timestamp, gpsCoords: currentLocation ? `${currentLocation.lat.toFixed(6)}, ${currentLocation.lon.toFixed(6)}` : null, gpsAccuracy: currentLocation ? currentLocation.accuracy : null, estadoValidacionGPS: estadoGPS.split(' ')[0], distancia: distancia }; console.log("Mostrando formulario..."); qrSillaDisplay.textContent = qrCodeValue; clienteSillaDisplay.textContent = cliente.NombreCliente; usuarioDisplay.textContent = masajistas.find(m => m.EmailMasajista === currentUserEmail)?.NombreMasajista || currentUserEmail; fechaHoraDisplay.textContent = formatLocalDateTime(now); observacionesInput.value = ''; gpsStatusDisplay.textContent = estadoGPS; gpsStatusDisplay.className = ''; gpsStatusDisplay.classList.add(estadoGPSClass); scanResultDisplay.style.display = 'none'; checkinForm.style.display = 'grid'; console.log("Fin handleScanSuccess."); } catch (error) { console.error("Error en handleScanSuccess:", error); showNotification(`Error: ${error.message}`, 'error'); if (scanResultDisplay) scanResultDisplay.style.display = 'none'; resetMarcarView(false); } }
    function resetMarcarView(attemptStop = true) { console.log(`Reseteando vista Marcar (attemptStop=${attemptStop})...`); if (attemptStop) { stopScanner().catch(e => console.warn("Warn al detener en reset:", e)); } else { if(scannerContainer) scannerContainer.style.display = 'none'; } if(scanButton) scanButton.style.display = 'block'; if(scanResultDisplay) { scanResultDisplay.textContent = ''; scanResultDisplay.style.display = 'none'; } if(checkinForm) checkinForm.style.display = 'none'; if(observacionesInput) observacionesInput.value = ''; currentCheckinData = null; if(activeSessionCard) displayActiveSessionCard(); console.log("Vista Marcar reseteada."); }
    function handleSaveRegistro() { console.log('--- handleSaveRegistro START ---'); console.log('Verificando currentCheckinData:', currentCheckinData); if (!currentCheckinData) { showNotification("Error: No hay datos del escaneo. Intenta escanear de nuevo.", 'error'); return; } const notas = observacionesInput.value.trim(); const { qrCode, masajistaEmail, timestamp, gpsCoords, estadoValidacionGPS, clienteId, clienteNombre } = currentCheckinData; console.log(`Datos: QR=${qrCode}, User=${masajistaEmail}, Time=${timestamp}, GPS=${gpsCoords}, Estado=${estadoValidacionGPS}, Notas=${notas}`); console.log('Buscando registro abierto...'); const openRecordIndex = registros.findIndex(r => r.MasajistaEmail === masajistaEmail && r.SillaQREscaneado === qrCode && r.TimestampCheckOut === null); console.log('openRecordIndex:', openRecordIndex); if (openRecordIndex === -1) { console.log('>>> CHECK-IN'); const newRec = { RegistroID: `reg_${Date.now()}_${Math.random().toString(36).substring(2, 5)}`, MasajistaEmail: masajistaEmail, TimestampCheckIn: timestamp, GPSCheckIn: gpsCoords, SillaQREscaneado: qrCode, TimestampCheckOut: null, GPSCheckOut: null, Duracion: null, Notas: notas, EstadoValidacionGPS: estadoValidacionGPS, ClienteID_Historico: clienteId, NombreCliente_Historico: clienteNombre }; console.log('Nuevo registro:', newRec); registros.push(newRec); showNotification("¡Entrada registrada!", 'success'); } else { console.log('>>> CHECK-OUT'); const rec = registros[openRecordIndex]; console.log('Actualizando:', rec); rec.TimestampCheckOut = timestamp; rec.GPSCheckOut = gpsCoords; rec.Notas = rec.Notas ? `${rec.Notas} | Salida: ${notas}` : `Salida: ${notas}`; try { console.log('Calculando duración...'); const inicio = new Date(rec.TimestampCheckIn); const fin = new Date(rec.TimestampCheckOut); const diffMs = fin - inicio; const totalSeconds = Math.round(diffMs / 1000); const diffHrs = Math.floor(totalSeconds / 3600); const diffMins = Math.floor((totalSeconds % 3600) / 60); const diffSecs = totalSeconds % 60; rec.Duracion = `${diffHrs}:${diffMins.toString().padStart(2, '0')}:${diffSecs.toString().padStart(2, '0')}`; console.log('Duración:', rec.Duracion); } catch (e) { console.error("Error duración:", e); rec.Duracion = 'Error'; } console.log('Registro actualizado:', rec); showNotification("¡Salida registrada!", 'success'); } saveDataToLocalStorage(); console.log('Antes de resetMarcarView...'); resetMarcarView(); console.log('Actualizando tablas...'); if (document.getElementById('view-historial')?.classList.contains('active')) populateHistoryTable(); if (currentRole === 'Admin' && document.getElementById('view-registros')?.classList.contains('active')) populateRegistrosTable(); if (currentRole === 'Admin' && document.getElementById('view-dashboard')?.classList.contains('active')) populateDashboard(); console.log('--- handleSaveRegistro END ---'); }
    function displayActiveSessionCard() { if (!activeSessionCard || !currentUserEmail) { console.warn("displayActiveSessionCard: Elementos no encontrados o usuario no definido."); return; } const openSession = registros.find(reg => reg.MasajistaEmail === currentUserEmail && reg.TimestampCheckOut === null); if (openSession) { console.log("Sesión activa encontrada:", openSession); if (activeSessionClient) activeSessionClient.textContent = openSession.NombreCliente_Historico || 'Desconocido'; if (activeSessionTime) activeSessionTime.textContent = formatLocalDateTime(openSession.TimestampCheckIn) || 'Hora desconocida'; activeSessionCard.style.display = 'block'; } else { console.log("No hay sesión activa para:", currentUserEmail); activeSessionCard.style.display = 'none'; } }
    function generateEditFormFields(itemType, itemData = null) { let fieldsHTML = `<input type="hidden" id="edit-item-type" value="${itemType}">`; const creando = !itemData; const idFieldKey = itemType === 'masajista' ? 'EmailMasajista' : (itemType === 'cliente' ? 'ClienteID' : 'SillaID'); if (!creando) { fieldsHTML += `<input type="hidden" id="edit-item-id" value="${itemData[idFieldKey]}">`; } switch (itemType) { case 'cliente': modalTitle.textContent = creando ? 'Añadir Nuevo Cliente' : 'Editar Cliente'; fieldsHTML += `${!creando ? `<label>Cliente ID:</label><span>${itemData.ClienteID}</span>` : ''}<label for="edit-field-NombreCliente">Nombre:</label><input type="text" id="edit-field-NombreCliente" value="${creando ? '' : (itemData.NombreCliente || '')}" required><label for="edit-field-Direccion">Dirección:</label><textarea id="edit-field-Direccion" rows="2">${creando ? '' : (itemData.Direccion || '')}</textarea><label for="edit-field-CoordenadasGPSCliente">GPS (Lat, Lon):</label><input type="text" id="edit-field-CoordenadasGPSCliente" value="${creando ? '' : (itemData.CoordenadasGPSCliente || '')}" placeholder="-25.1, -57.9"><label for="edit-field-Activo">Activo:</label><input type="checkbox" id="edit-field-Activo" ${creando ? 'checked' : (itemData.Activo ? 'checked' : '')}>`; if (creando) fieldsHTML += `<label for="edit-field-ClienteID">Cliente ID (Manual):</label><input type="text" id="edit-field-ClienteID" placeholder="Ej: NUEVOCLI" required>`; break; case 'silla': modalTitle.textContent = creando ? 'Añadir Nueva Silla' : 'Editar Silla'; let cliOpts = clientes.map(c => `<option value="${c.ClienteID}" ${!creando && c.ClienteID === itemData.ClienteAsociado ? 'selected' : ''}>${c.NombreCliente}</option>`).join(''); fieldsHTML += `${!creando ? `<label>Silla ID:</label><span>${itemData.SillaID}</span>` : ''}<label for="edit-field-QR_ID">QR ID:</label><input type="text" id="edit-field-QR_ID" value="${creando ? '' : (itemData.QR_ID || '')}" required><label for="edit-field-Descripcion">Descripción:</label><input type="text" id="edit-field-Descripcion" value="${creando ? '' : (itemData.Descripcion || '')}"><label for="edit-field-ClienteAsociado">Cliente:</label><select id="edit-field-ClienteAsociado" required>${cliOpts}</select><label for="edit-field-EsDeEvento">Evento:</label><input type="checkbox" id="edit-field-EsDeEvento" ${creando ? '' : (itemData.EsDeEvento ? 'checked' : '')}><label for="edit-field-Activa">Activa:</label><input type="checkbox" id="edit-field-Activa" ${creando ? 'checked' : (itemData.Activa ? 'checked' : '')}>`; if (creando) fieldsHTML += `<label for="edit-field-SillaID">Silla ID (Manual):</label><input type="text" id="edit-field-SillaID" placeholder="Ej: sillaNUEVA" required>`; break; case 'masajista': modalTitle.textContent = creando ? 'Añadir Nuevo Masajista' : 'Editar Masajista'; const roles = ['Admin', 'Masajista']; let rolOpts = roles.map(r => `<option value="${r}" ${!creando && r === itemData.Rol ? 'selected' : ''}>${r}</option>`).join(''); fieldsHTML += `<label for="edit-field-EmailMasajista">Email:</label><input type="email" id="edit-field-EmailMasajista" value="${creando ? '' : (itemData.EmailMasajista || '')}" ${!creando ? 'readonly' : 'required'}><label for="edit-field-NombreMasajista">Nombre:</label><input type="text" id="edit-field-NombreMasajista" value="${creando ? '' : (itemData.NombreMasajista || '')}" required><label for="edit-field-Rol">Rol:</label><select id="edit-field-Rol" required>${rolOpts}</select><label for="edit-field-Activo">Activo:</label><input type="checkbox" id="edit-field-Activo" ${creando ? 'checked' : (itemData.Activo ? 'checked' : '')}>`; break; default: fieldsHTML = '<p>Error: Tipo desconocido.</p>'; } if(editFormFields) editFormFields.innerHTML = fieldsHTML; }
    function openEditModal(itemType, itemIdOrEmail = null) { isCreatingNew = !itemIdOrEmail; console.log(isCreatingNew ? `Abriendo modal para CREAR ${itemType}` : `Abriendo modal para EDITAR ${itemType} con ID/Email: ${itemIdOrEmail}`); let itemData = null; if (!isCreatingNew) { let dataArray, idField; switch(itemType) { case 'cliente': dataArray = clientes; idField = 'ClienteID'; break; case 'silla': dataArray = sillas; idField = 'SillaID'; break; case 'masajista': dataArray = masajistas; idField = 'EmailMasajista'; break; default: console.error("Tipo desconocido:", itemType); return; } itemData = dataArray.find(item => item[idField] === itemIdOrEmail); if (!itemData) { showNotification(`Error: ${itemType} no encontrado para editar.`, 'error'); return; } currentlyEditing = { type: itemType, id: itemIdOrEmail, data: itemData }; } else { currentlyEditing = null; } generateEditFormFields(itemType, itemData); if(editModalOverlay) { editModalOverlay.style.display = 'flex'; setTimeout(() => editModalOverlay.classList.add('visible'), 10); } }
    function closeEditModal() { if(editModalOverlay){ editModalOverlay.classList.remove('visible'); setTimeout(() => { editModalOverlay.style.display = 'none'; if(editFormFields) editFormFields.innerHTML = ''; currentlyEditing = null; }, 300); } }
    function handleSaveChanges(event) { event.preventDefault(); console.log("Intentando guardar cambios / crear nuevo..."); const itemTypeInput = document.getElementById('edit-item-type'); if(!itemTypeInput) { console.error("Falta #edit-item-type en el form"); showNotification("Error: Tipo de item no especificado.", 'error'); return; } const itemType = itemTypeInput.value; let itemId = null; const itemIdInput = document.getElementById('edit-item-id'); if (itemIdInput) itemId = itemIdInput.value; console.log(`Operación: ${isCreatingNew ? 'CREAR' : 'EDITAR'}, Tipo: ${itemType}, ID (si edita): ${itemId}`); try { const formData = {}; const formElements = editForm.querySelectorAll('[id^="edit-field-"]'); formElements.forEach(el => { const key = el.id.replace('edit-field-', ''); formData[key] = el.type === 'checkbox' ? el.checked : el.value; }); console.log("Datos del formulario:", formData); if (isCreatingNew) { let newItem = { ...formData }; let dataArray, idFieldKey; switch(itemType) { case 'cliente': dataArray = clientes; idFieldKey = 'ClienteID'; if (!newItem.ClienteID || clientes.find(c => c.ClienteID === newItem.ClienteID)) { throw new Error(`El Cliente ID "${newItem.ClienteID || '(vacío)'}" ya existe o no fue proporcionado.`); } break; case 'silla': dataArray = sillas; idFieldKey = 'SillaID'; if (!newItem.SillaID || sillas.find(s => s.SillaID === newItem.SillaID)) { throw new Error(`La Silla ID "${newItem.SillaID || '(vacío)'}" ya existe o no fue proporcionada.`); } break; case 'masajista': dataArray = masajistas; idFieldKey = 'EmailMasajista'; if (!newItem.EmailMasajista || masajistas.find(m => m.EmailMasajista === newItem.EmailMasajista)) { throw new Error(`El Email "${newItem.EmailMasajista || '(vacío)'}" ya existe o no fue proporcionado.`); } break; default: throw new Error("Tipo desconocido para creación."); } console.log("Nuevo item a añadir:", newItem); dataArray.push(newItem); showNotification(`¡${itemType} "${newItem[idFieldKey]}" añadido!`, 'success'); } else { if (!currentlyEditing || currentlyEditing.type !== itemType || currentlyEditing.id !== itemId) { throw new Error("Inconsistencia en edición."); } console.log("Actualizando item existente:", currentlyEditing.data); Object.assign(currentlyEditing.data, formData); showNotification(`¡${itemType} "${itemId}" actualizado!`, 'success'); } saveDataToLocalStorage(); closeEditModal(); switch(itemType) { case 'cliente': populateClientesTable(); break; case 'silla': populateSillasTable(); break; case 'masajista': populateMasajistasTable(); break; } } catch (error) { console.error("Error al guardar/crear:", error); showNotification(`Error: ${error.message}`, 'error'); } isCreatingNew = false; }
    function populateDashboard() { if (currentRole !== 'Admin') return; console.log("Poblando dashboard con gráficos..."); const hoy = new Date(); const inicioHoy = new Date(hoy.getFullYear(), hoy.getMonth(), hoy.getDate(), 0, 0, 0); const finHoy = new Date(hoy.getFullYear(), hoy.getMonth(), hoy.getDate(), 23, 59, 59); const sesionesActivasAhora = registros.filter(r => r.TimestampCheckOut === null); if (dbMasajistasEnServicio) { const masajistasUnicos = new Set(sesionesActivasAhora.map(r => r.MasajistaEmail)); dbMasajistasEnServicio.textContent = masajistasUnicos.size; } if (dbClientesConServicio) { const clientesUnicos = new Set(sesionesActivasAhora.map(r => r.ClienteID_Historico)); dbClientesConServicio.textContent = clientesUnicos.size; } if (dbListaSesionesActivas) { dbListaSesionesActivas.innerHTML = ''; if (sesionesActivasAhora.length === 0) { dbListaSesionesActivas.innerHTML = '<li>No hay sesiones activas.</li>'; } else { sesionesActivasAhora.slice(0, 5).forEach(s => { const m = masajistas.find(u => u.EmailMasajista === s.MasajistaEmail); const n = m ? m.NombreMasajista : s.MasajistaEmail; const li = document.createElement('li'); li.textContent = `${n} en ${s.NombreCliente_Historico || '?'} (desde ${formatLocalDateTime(s.TimestampCheckIn, false)})`; dbListaSesionesActivas.appendChild(li); }); } } const alertasDeHoy = registros.filter(r => { const fechaIn = new Date(r.TimestampCheckIn); return fechaIn >= inicioHoy && fechaIn <= finHoy && r.EstadoValidacionGPS === 'Alerta'; }); if (dbAlertasGpsHoy) dbAlertasGpsHoy.textContent = alertasDeHoy.length; const ultimasAlertas = [...alertasDeHoy].sort((a,b) => new Date(b.TimestampCheckIn) - new Date(a.TimestampCheckIn)).slice(0, 3); if (dbListaUltimasAlertasGps) { dbListaUltimasAlertasGps.innerHTML = ''; if (ultimasAlertas.length === 0) { dbListaUltimasAlertasGps.innerHTML = '<li>No hay alertas GPS hoy.</li>'; } else { ultimasAlertas.forEach(a => { const m = masajistas.find(u => u.EmailMasajista === a.MasajistaEmail); const n = m ? m.NombreMasajista : a.MasajistaEmail; const li = document.createElement('li'); li.innerHTML = `<strong>${n}</strong> en ${a.NombreCliente_Historico || '?'} (${formatLocalDateTime(a.TimestampCheckIn, false)}) - ${a.distancia ? a.distancia.toFixed(0)+'m' : 'Dist. N/A'}`; dbListaUltimasAlertasGps.appendChild(li); }); } } const serviciosCompletadosHoy = registros.filter(r => { if (!r.TimestampCheckOut) return false; const fechaOut = new Date(r.TimestampCheckOut); return fechaOut >= inicioHoy && fechaOut <= finHoy; }); if (dbServiciosCompletadosHoy) dbServiciosCompletadosHoy.textContent = serviciosCompletadosHoy.length; let totalMinutosServicioHoy = 0; serviciosCompletadosHoy.forEach(r => { if (r.Duracion) { const p = r.Duracion.split(':'); if (p.length === 3) totalMinutosServicioHoy += parseInt(p[0])*60 + parseInt(p[1]) + Math.round(parseInt(p[2])/60); } }); const horasHoy = Math.floor(totalMinutosServicioHoy / 60); const minutosHoy = totalMinutosServicioHoy % 60; if (dbHorasServicioHoy) dbHorasServicioHoy.textContent = `${horasHoy}h ${minutosHoy.toString().padStart(2, '0')}m`; const ultimosFinalizados = [...serviciosCompletadosHoy].sort((a,b) => new Date(b.TimestampCheckOut) - new Date(a.TimestampCheckOut)).slice(0,3); if (dbTablaServiciosFinalizadosHoyBody) { dbTablaServiciosFinalizadosHoyBody.innerHTML = ''; if (ultimosFinalizados.length === 0) { dbTablaServiciosFinalizadosHoyBody.innerHTML = '<tr><td colspan="4" style="text-align:center;">No hay servicios finalizados hoy.</td></tr>'; } else { ultimosFinalizados.forEach(r => { const m = masajistas.find(u => u.EmailMasajista === r.MasajistaEmail); const n = m ? m.NombreMasajista : r.MasajistaEmail; const tr = document.createElement('tr'); tr.innerHTML = `<td>${n}</td><td>${r.NombreCliente_Historico || 'N/A'}</td><td>${formatLocalDateTime(r.TimestampCheckOut, false)}</td><td>${r.Duracion || '-'}</td>`; dbTablaServiciosFinalizadosHoyBody.appendChild(tr); }); } } const hoyDate = new Date(); const sieteDiasAtras = new Date(); sieteDiasAtras.setDate(hoyDate.getDate() - 7); sieteDiasAtras.setHours(0,0,0,0); const registrosUltimos7Dias = registros.filter(r => { if (!r.TimestampCheckOut) return false; const fechaServicio = new Date(r.TimestampCheckOut); return fechaServicio >= sieteDiasAtras && fechaServicio <= hoyDate; }); const serviciosPorCliente = {}; registrosUltimos7Dias.forEach(r => { const nombreCliente = r.NombreCliente_Historico || 'Desconocido'; serviciosPorCliente[nombreCliente] = (serviciosPorCliente[nombreCliente] || 0) + 1; }); const clienteLabels = Object.keys(serviciosPorCliente); const clienteData = Object.values(serviciosPorCliente); const ctxServiciosCliente = document.getElementById('serviciosPorClienteChart'); if (ctxServiciosCliente) { if (typeof Chart === "undefined") { console.error("Chart.js no está cargado."); return; } if (serviciosPorClienteChartInstance) { serviciosPorClienteChartInstance.destroy(); } serviciosPorClienteChartInstance = new Chart(ctxServiciosCliente, { type: 'bar', data: { labels: clienteLabels, datasets: [{ label: 'Nº de Servicios', data: clienteData, backgroundColor: 'rgba(54, 162, 235, 0.6)', borderColor: 'rgba(54, 162, 235, 1)', borderWidth: 1 }] }, options: { responsive: true, maintainAspectRatio: true, scales: { y: { beginAtZero: true, ticks: { stepSize: 1 } } }, plugins: { legend: { display: true, position: 'top', }, title: { display: false, text: 'Servicios por Cliente (Últimos 7 Días)' } } } }); } else { console.warn("Elemento canvas 'serviciosPorClienteChart' no encontrado."); } console.log("Dashboard poblado con gráficos."); }

    // --- Asignación de Eventos ---
    console.log("--- Iniciando Asignación de Eventos ---");
    if (menuToggle) { menuToggle.addEventListener('click', () => { console.log("Menu toggle clicked. Body class 'sidebar-open' será: ", !body.classList.contains('sidebar-open')); sidebar.classList.toggle('hidden'); content.classList.toggle('sidebar-hidden'); body.classList.toggle('sidebar-open'); sidebar.classList.toggle('visible', !sidebar.classList.contains('hidden')); }); } else { console.error("Falta: #menu-toggle"); }
    body.addEventListener('click', (event) => { if (window.innerWidth <= 992 && !sidebar.classList.contains('hidden') && !menuToggle.contains(event.target) && !sidebar.contains(event.target)) { console.log("Cerrando menú por clic fuera. Body class 'sidebar-open' será: false"); menuToggle.click(); } });
    navLinks.forEach(link => { if (link.dataset.view) { link.addEventListener('click', (e) => { e.preventDefault(); const id = link.dataset.view; setActiveView(id); if (id === 'historial') populateHistoryTable(); else if (currentRole === 'Admin') { if (id === 'clientes') populateClientesTable(); else if (id === 'sillas') populateSillasTable(); else if (id === 'masajistas') populateMasajistasTable(); else if (id === 'registros') populateRegistrosTable(); } if (window.innerWidth <= 992 && !sidebar.classList.contains('hidden')) { console.log("Cerrando menú por selección de link. Body class 'sidebar-open' será: false"); menuToggle.click(); } }); } });
    document.querySelectorAll('.fab.admin-only').forEach(fab => { fab.addEventListener('click', () => { const viewElement = fab.closest('.view'); let itemType = ''; if (viewElement) { if (viewElement.id === 'view-clientes') itemType = 'cliente'; else if (viewElement.id === 'view-sillas') itemType = 'silla'; else if (viewElement.id === 'view-masajistas') itemType = 'masajista'; } if (itemType) { openEditModal(itemType, null); } else { console.warn("No se pudo determinar el tipo para FAB:", fab); showNotification("Acción no definida.", 'warning'); } }); });
    if (content) { content.addEventListener('click', (event) => { const targetButton = event.target.closest('button.btn-edit, button.btn-delete'); if (!targetButton) return; const tableContainer = targetButton.closest('.table-container'); if (!tableContainer) return; const viewElement = tableContainer.closest('.view'); let itemType = ''; if (viewElement) { if (viewElement.id === 'view-clientes') itemType = 'cliente'; else if (viewElement.id === 'view-sillas') itemType = 'silla'; else if (viewElement.id === 'view-masajistas') itemType = 'masajista'; } const id = targetButton.dataset.id || targetButton.dataset.email; if (targetButton.classList.contains('btn-edit')) { if (itemType && id) { openEditModal(itemType, id); } else { console.error("Falta tipo/ID para editar (delegado)."); } } else if (targetButton.classList.contains('btn-delete')) { if (!itemType || !id) { console.error("Falta tipo/ID para borrar (delegado)."); showNotification("Error: No se identificó elemento.", 'error'); return; } setTimeout(() => { if (confirm(`¿Seguro que quieres borrar ${itemType} "${id}"?`)) { console.log(`Borrando (delegado) ${itemType}: ${id}`); let success = false; let idFieldKey = ''; switch(itemType) { case 'cliente': idFieldKey = 'ClienteID'; const cIdx = clientes.findIndex(c => c[idFieldKey] === id); if (cIdx > -1) { clientes.splice(cIdx, 1); success = true; } if (success) { populateClientesTable(); saveDataToLocalStorage(); } break; case 'silla': idFieldKey = 'SillaID'; const sIdx = sillas.findIndex(s => s[idFieldKey] === id); if (sIdx > -1) { sillas.splice(sIdx, 1); success = true; } if (success) { populateSillasTable(); saveDataToLocalStorage(); } break; case 'masajista': idFieldKey = 'EmailMasajista'; const mIdx = masajistas.findIndex(m => m[idFieldKey] === id); if (mIdx > -1) { masajistas.splice(mIdx, 1); success = true; } if (success) { populateMasajistasTable(); saveDataToLocalStorage(); } break; default: console.error("Tipo desconocido para borrar (delegado):", itemType); showNotification("Error: Tipo no reconocido.", 'error'); return; } if (success) { console.log(`${itemType} "${id}" borrado.`); showNotification(`¡${itemType} "${id}" borrado!`, 'success'); } else { console.error(`No se encontró ${itemType} ${id} para borrar.`); showNotification(`Error: No se pudo borrar ${itemType}.`, 'error'); } } }, 0); } }); console.log("Listener DELEGADO para acciones de tabla añadido a #content.");
    } else { console.error("#content no encontrado para listener delegado."); }
    console.log("Configurando eventos para Vista 'Marcar'...");
    if (scanButton) { console.log("Añadiendo listener 'click' a #scan-qr-button..."); scanButton.addEventListener('click', startScanner); console.log("Listener 'click' añadido a #scan-qr-button."); } else { console.error("Error crítico: No se encontró #scan-qr-button."); }
    if (cancelButton) { cancelButton.addEventListener('click', () => resetMarcarView(true)); } else { console.error("Error: No se encontró #cancel-button."); }
    if (checkinForm) { checkinForm.addEventListener('submit', (event) => { event.preventDefault(); console.log('--- Evento SUBMIT del formulario capturado ---'); handleSaveRegistro(); }); console.log("Listener 'submit' añadido a #checkin-form"); } else { console.error("Error crítico: No se encontró #checkin-form."); }
    const saveCfgBtn = document.getElementById('save-config-button'); if (saveCfgBtn) { saveCfgBtn.addEventListener('click', saveConfiguration); } else if(currentRole === 'Admin') { console.warn("Advertencia: No se encontró #save-config-button."); }
    if (editForm) { editForm.addEventListener('submit', handleSaveChanges); console.log("Listener 'submit' añadido a #edit-form"); } else { console.error("Error crítico: #edit-form no encontrado."); }
    if (modalCloseBtn) modalCloseBtn.addEventListener('click', closeEditModal);
    if (modalCancelBtn) modalCancelBtn.addEventListener('click', closeEditModal);
    if (editModalOverlay) editModalOverlay.addEventListener('click', (e) => { if (e.target === editModalOverlay) closeEditModal(); });
    console.log("--- Fin Asignación de Eventos ---");

    // --- Inicialización de la App ---
    console.log("--- Iniciando Inicialización de la App ---");
    loadDataFromLocalStorage();
    setupRoleBasedUI(currentRole);
    console.log(`App inicializada. Rol: ${currentRole}, Email: ${currentUserEmail}. Vista activa: ${document.querySelector('.view.active')?.id || 'ninguna'}`);

}); // Fin DOMContentLoaded